<project name="Deduction Tactics" default="jar-full.full" basedir="C:/Users/Raymond/Documents/Programming/Java" xmlns="antlib:org.apache.tools.ant">
	<description />
	
	<property name="classfiles" value="**/*.class META-INF/** **/*.txt **/*.png **/*.json **/*.bmp **/*.svg **/Hit.wav **/*.csv **/CC-By.url" />
	<property name="sourcefiles" value="**/*.java **/*.scala build.xml **/*.proguard **/basic.json.php **/*.scalaDontCompile" />
	
	<property name="tmp" value="C:/Users/Raymond/AppData/Local/Temp" />
	<property name="scala" location="C:/Program Files/Scala/scala-2.9.3/lib/" />
	<!-- property name="scala" location="C:/Program Files/Scala/scala-2.10.0.final/lib/" / -->
	<property name="scala-lib"   location="${scala}/scala-library.jar" />
	<property name="scala-comp"  location="${scala}/scala-compiler.jar" />
	<property name="scala-swing" location="${scala}/scala-swing.jar" />
	<property name="svgSalamander" location="C:\Users\Raymond\Documents\Programming\Java\Imported JAR Files\svgSalamander\0.1.12\svgSalamander.jar" />
	<property name="javaws" location="C:\Program Files\Java\jdk1.7.0_07\jre\lib\javaws.jar" />
	<property name="anonFunReduce" value="-Xplugin:C:/Users/Raymond/Documents/Programming/Java/ScalaParserPlugin/2.9.1/CommonAnonFuns.zip" />
	<!-- property name="anonFunReduce" value="" / -->
	
	<property name="version" value="a.4.1" />
	<!-- the manifest file doesn't like letters; take version and replace 'a' with '000.010' and 'b' with '000.011'. -->
	<property name="version-manifest" value="000.010.4.1" />

	<property name="dirClasses" location="${tmp}/antBuild/classes/" />
	<property name="dirGenerate" location="${tmp}/antBuild/gen/" />
	<property name="dirExecute" value="${tmp}/antBuild/jars/" />
	<property name="dirWebStruc" value="${tmp}/antBuild/dist/deductionTactics-${version}-" />
	
	<path id="myClasspath">
		<pathelement location="${dirClasses}" />
		<pathelement location="${scala-lib}" />
		<pathelement location="${scala-swing}" />
		<pathelement location="${svgSalamander}" />
		
		<!-- these are Scala 2.10.0 jar files>
		<pathelement location="${scala}/scala-reflect.jar" />
		<pathelement location="${scala}/scala-actors.jar" />
		-->
	</path>
	
	<target name="init" >
		<!-- set up scala commands -->
		<taskdef resource="scala/tools/ant/antlib.xml">
			<classpath>
				<pathelement location="${scala-comp}" />
				<pathelement location="${scala-lib}"  />
			</classpath>
		</taskdef>
		
		<!-- set up pack200 commands -->
		<!-- taskdef name="p200ant"
				classname="de.matthiasmann.p200ant.P200AntTask"
				classpath="C:\Users\Raymond\Documents\Programming\Java\Imported JAR Files\p200ant.jar" / -->
		<taskdef name="pack200"
				classname="de.matthiasmann.p200ant.P200AntTask"		
				classpath="classes" />
		
		<!-- set up proguard command -->
		<taskdef resource="proguard/ant/task.properties"
			classpath="C:\Users\Raymond\Downloads\proguard4.8\lib\proguard.jar" />
		
		
		<macrodef name="makeemptyclassfile" description="Make an empty class file so that a file will only compile once">
			<attribute name="className"/>
			<attribute name="directory" default="" /> <!-- using '\'s -->
			<attribute name="package" default="" /> <!-- using '.'s -->
			
			<sequential>
				<mkdir dir="${dirGenerate}\@{directory}"/>
				<condition property="makeemptyfile.file-@{package}.@{className}" value="${dirGenerate}\blank.java" else="${dirGenerate}\@{directory}\@{className}.java">
				<and>
					<resourceexists>
						<file file="${dirGenerate}\@{directory}\@{className}.java"/>
					</resourceexists>
					<uptodate srcfile="${dirGenerate}\@{directory}\@{className}.java" targetfile="${dirClasses}\@{directory}\@{className}.class" />
				</and>
				</condition>
				<condition property="makeemptyfile.directory-@{package}.@{className}" value="" else="@{directory}\"> 
					<equals arg1="" arg2="@{directory}" />
				</condition>
				<condition property="makeemptyfile.package-@{package}.@{className}" value="" else="package @{package};"> 
					<equals arg1="" arg2="@{package}" />
				</condition>
				
				
				
				<echo file="${makeemptyfile.file-@{package}.@{className}}">
					${makeemptyfile.package-@{package}.@{className}}
					public class @{className} {}
				</echo>
				<javac destdir="${dirClasses}" sourcepath="${dirGenerate}"
						srcdir="${dirGenerate}" includeAntRuntime="false">
					<include name="${makeemptyfile.directory-@{package}.@{className}}@{className}.java" />
				</javac>
			</sequential>
		</macrodef>
		
		
		<!-- create desitination directories -->
		<mkdir dir="${dirClasses}"/>
		<mkdir dir="${dirGenerate}"/>
		<mkdir dir="${dirExecute}"/>
	</target>
	
	<!-- making classes -->
	<target name="class-deductionTactics" description="compile the meat classes" depends="class-anonFunReduce,class-boardGameGeneric,init" >
		<scalac destdir="${dirClasses}" srcdir="Games/DeductionTactics"
					classpathref="myClasspath" encoding="UTF-8"
					addparams="${anonFunReduce}">
			<include name="**/*.scala" />
			<exclude name="depreciated/**" />
			<exclude name="**/test/**" />
			<exclude name="**/ansiEscape/**" />
		</scalac>
		<javac destdir="${dirClasses}" srcdir="Games/DeductionTactics"
					classpathref="myClasspath" encoding="UTF-8"
					includeAntRuntime="false">
			<include name="**/*.java" />
			<exclude name="depreciated/**" />
			<exclude name="**/test/**" />
		</javac>
		<delete file="${dirClasses}/build.xml" />
		<copy todir="${dirClasses}" >
			<fileset dir="Games/DeductionTactics">
				<exclude name="depreciated/**" />
				<exclude name="**!jars/test/**" />
			</fileset>
		</copy>
		
		<replaceregexp match="[\t\n]+" replace=" "
					encoding="UTF-8" flags="g" >
			<fileset dir="${dirClasses}">
				<include name="**/*.json"/>
				<include name="**/*.svg"/>
			</fileset>
		</replaceregexp>

		<makeemptyclassfile className="Main" package="com.rayrobdod.deductionTactics" directory="com/rayrobdod/deductionTactics" />
		<makeemptyclassfile className="SpaceClass" package="com.rayrobdod.deductionTactics" directory="com/rayrobdod/deductionTactics" />
		<makeemptyclassfile className="NetworkPanel" package="com.rayrobdod.deductionTactics.swingView" directory="com/rayrobdod/deductionTactics/swingView" />
		<makeemptyclassfile className="EventsPlayer" package="com.rayrobdod.deductionTactics" directory="com/rayrobdod/deductionTactics" />
		<makeemptyclassfile className="EventsToken" package="com.rayrobdod.deductionTactics" directory="com/rayrobdod/deductionTactics" />
		<makeemptyclassfile className="tiles" package="com.rayrobdod.tilemaps.Field_Chess" directory="com/rayrobdod/tilemaps/Field Chess" />
	</target>
	
	<target name="class-boardGameGeneric" description="compile the backing library classes" depends="class-utilities,init" >
		<scalac destdir="${dirClasses}" srcdir="Games/BoardGameGeneric"
					classpathref="myClasspath" encoding="UTF-8"
					addparams="${anonFunReduce}">
			<include name="**/*.scala" />
			<exclude name="depreciated/**" />
			<exclude name="com/rayrobdod/boardGame/view/**" />
			<exclude name="**/junit/**" />
		</scalac>
		<javac destdir="${dirClasses}" srcdir="Games/BoardGameGeneric"
					classpathref="myClasspath" encoding="UTF-8"
					includeAntRuntime="false">
			<include name="**/*.java" />
			<exclude name="com/rayrobdod/boardGame/view/**" />
			<exclude name="**/junit/**" />
		</javac>
		<copy todir="${dirClasses}" >
			<fileset dir="Games/BoardGameGeneric">
				<exclude name="depreciated/**" />
				<exclude name="**/*.proguard"/>
				<exclude name="com/rayrobdod/boardGame/view/**" />
				<exclude name="**/junit/**" />
			</fileset>
		</copy>
	</target>
	
	<target name="class-utilities" description="compile helper files" depends="init" >
		<ant dir="File Formats\JSON"
					target="classes" useNativeBasedir="true" />
		<ant dir="File Formats\CSV"
					target="classes" useNativeBasedir="true" />
		
		<scalac destdir="${dirClasses}" sourcepath="File Formats\CFN"
					srcdir="File Formats\CFN" classpathref="myClasspath"
					encoding="UTF-8" addparams="${anonFunReduce}" >
			<include name="com/rayrobdod/commonFunctionNotation/Parser.scala" />
		</scalac>
		
		<scalac destdir="${dirClasses}" sourcepath="Utilities"
					srcdir="Utilities" classpathref="myClasspath"
					encoding="UTF-8" addparams="${anonFunReduce}" >
			<include name="com/rayrobdod/animation/*.scala" />
			<include name="com/rayrobdod/swing/layouts/MoveToLayout.scala" />
			<include name="com/rayrobdod/swing/NameAndIcon.scala" />
			<include name="com/rayrobdod/swing/ScalaSeqListModel.scala" />
			<include name="com/rayrobdod/swing/NullReplaceListCellRenderer.scala" />
			<include name="com/rayrobdod/swing/GridBagConstraintsFactory.scala" />
			<exclude name="com/rayrobdod/animation/DieAnimation.scala" />
		</scalac>
		<javac destdir="${dirClasses}" sourcepath="Utilities"
				srcdir="Utilities" classpathref="myClasspath"
				encoding="UTF-8" includeAntRuntime="false">
			<include name="com/rayrobdod/util/BlitzAnimImage.java" />
			<include name="com/rayrobdod/util/services/*.java" />
			<include name="com/rayrobdod/swing/SolidColorIcon.java" />
			<include name="com/rayrobdod/swing/ExitMenuItem.java" />
			<include name="com/rayrobdod/swing/layouts/LayeredLayout.java" />
		</javac>
		
		<copy todir="${dirClasses}" >
			<fileset dir="Utilities">
				<include name="com/rayrobdod/swing/SolidColorIcon.java" />
				<include name="com/rayrobdod/util/BlitzAnimImage.java" />
				<include name="com/rayrobdod/animation/*.scala" />
				<include name="com/rayrobdod/swing/layouts/MoveToLayout.scala" />
				<include name="com/rayrobdod/swing/layouts/LayeredLayout.java" />
				<include name="com/rayrobdod/swing/NameAndIcon.scala" />
				<include name="com/rayrobdod/swing/ScalaSeqListModel.scala" />
				<exclude name="com/rayrobdod/animation/DieAnimation.scala" />
				<include name="com/rayrobdod/swing/ExitMenuItem.java" />
				<include name="com/rayrobdod/util/services/*.java" />
				<include name="com/rayrobdod/swing/GridBagConstraintsFactory.scala" />
			</fileset>
		</copy>
	</target>
	
	<target name="class-anonFunReduce" description="compile the commonAnonFuns" depends="init" >
		<property name="anonFunReduce.src" location="C:\Users\Raymond\Documents\Programming\Java\ScalaParserPlugin\" />
		
		<scalac destdir="${dirClasses}" sourcepath="Utilities"
					srcdir="Utilities" classpathref="myClasspath"
					encoding="UTF-8" >
			<include name="com/rayrobdod/swing/NameAndIcon.scala" />
		</scalac>
		<scalac destdir="${dirClasses}" sourcepath="${anonFunReduce.src}"
					srcdir="${anonFunReduce.src}" classpathref="myClasspath" classpath="${scala-comp}"
					encoding="UTF-8" >
			<include name="CommonAnonFuns.scala" />
		</scalac>
		
		<makeemptyclassfile className="CommonAnonFuns" />
	</target> <!-- -->
	
	<target name="classes" depends="class-deductionTactics,class-boardGameGeneric,class-utilities" />
	<!-- end making classes -->
	
	
	<!-- making jars -->
	<target name="jar-full.orig" depends="classes" description="creates a jar with just the original classes" >
		<jar destfile="${dirExecute}full-orig.jar" update="false"
					manifest="Games/DeductionTactics/META-INF/MANIFEST.MF" level="9">
			<fileset dir="${dirClasses}" includes="${classfiles}" />
			<manifest>
				<!-- attribute name="Class-Path" value="&quot;${scala-lib}&quot;"/ -->
				<attribute name="Implementation-Version" value="${version-manifest}" />
			</manifest>
		</jar>
	</target>
	
	<target name="jar-full.orig.src" depends="classes" description="creates a jar with just the original classes, and includes the sources" >
		<jar destfile="${dirExecute}full-orig-src.jar" update="false"
					manifest="Games/DeductionTactics/META-INF/MANIFEST.MF" level="9">
			<fileset dir="${dirClasses}" includes="${classfiles} ${sourcefiles}" />
			<manifest>
				<!-- attribute name="Class-Path" value="&quot;${scala-lib}&quot;"/ -->
				<attribute name="Implementation-Version" value="${version-manifest}" />
			</manifest>
		</jar>
	</target>
	
	<target name="jar-full.full" depends="classes" description="creates a jar with all the classes" >
		<jar destfile="${dirExecute}full-full.jar" update="false"
					manifest="Games/DeductionTactics/META-INF/MANIFEST.MF" level="9" >
			<fileset dir="${dirClasses}" includes="${classfiles} scala?license.txt" />
			<zipfileset src="${scala-lib}" includes="**/*.class" />
			<zipfileset src="${scala-swing}" includes="**/*.class" />
			<zipfileset src="${svgSalamander}" includes="**/*.class" />
			<manifest>
				<attribute name="Implementation-Version" value="${version-manifest}" />
			</manifest>
		</jar>
	</target>
	
	<target name="jar-full" depends="jar-full.full,jar-full.orig,jar-full.orig.src" />
	
	
	<target name="jar-mini.orig" depends="jar-full.orig" description="creates a jar with neccessary classes" >
		<proguard configuration="Games/DeductionTactics/mini.proguard">
			-injars '${dirExecute}full-orig.jar'
			-outjars '${dirExecute}mini-orig.jar'
			
			-libraryjars '${scala-lib}'(!**/test/**)
			-libraryjars '${scala-swing}'
			-libraryjars '${svgSalamander}'(com/**)
		</proguard>
		<pack200 srcfile="${dirExecute}mini-orig.jar" repack="true" unkownAttribute="strip" />
	</target>
	
	<target name="jar-mini.full" depends="jar-full.full" description="creates a jar with neccessary classes" >
		<proguard configuration="Games/DeductionTactics/mini.proguard">
			-injars '${dirExecute}full-full.jar'
			-outjars '${dirExecute}mini-full.jar'
		</proguard>
		<pack200 srcfile="${dirExecute}mini-full.jar" repack="true" unkownAttribute="strip" />
	</target>
	
	<target name="jar-micro.full" depends="jar-full.full" description="creates a jar with neccessary classes" >
		<proguard configuration="Games/DeductionTactics/micro.proguard">
			-injars '${dirExecute}full-full.jar'
			-outjars '${dirExecute}micro-full.jar'
		</proguard>
		<pack200 srcfile="${dirExecute}micro-full.jar" repack="true" unkownAttribute="strip" />
	</target>
	
	<target name="jar-mini.full.store" depends="jar-mini.full" description="creates a jar with neccessary classes" >
		<jar destfile="${dirGenerate}/mini-full-store.jar" compress="false">
			<zipfileset src="${dirExecute}mini-full.jar" />
		</jar>
		
		<gzip src="${dirGenerate}/mini-full-store.jar" destfile="${dirExecute}mini-full.jar.gz"/>
	</target>
	
	<target name="jars" depends="jar-full,jar-mini.full,jar-micro.full,jar-mini.orig" 
			description="build all jar files" >
		
		<copy todir="${dirExecute}\..\" >
			<fileset dir="Games/DeductionTactics">
				<include name="**\releaseNotes.txt" />
			</fileset>
		</copy>
	</target>
	<!-- end making jars -->
	
	
	<!-- making packs -->
	<target name="jars-compress" depends="jars"
			description="build all jar files using a single-file gzip file rather than individual gzipping" >
		<macrodef name="makecompression" description="Compress files">
			<attribute name="srcfile"/>
			<sequential>
				<pack200 srcfile="${dirExecute}@{srcfile}" repack="true" unkownAttribute="strip" />
				
				<jar destfile="${dirGenerate}/@{srcfile}.store" compress="false">
					<zipfileset src="${dirExecute}@{srcfile}" />
				</jar>
				<gzip src="${dirGenerate}/@{srcfile}.store" destfile="${dirExecute}@{srcfile}.gz"/>
				
				<pack200 srcfile="${dirExecute}@{srcfile}" effort="9" />
			</sequential>
		</macrodef>
		
		
		<makecompression srcfile="full-orig-src.jar" />
		<makecompression srcfile="full-orig.jar" />
		<makecompression srcfile="mini-orig.jar" />
		<!--makecompression srcfile="micro-orig.jar" /-->
		<makecompression srcfile="mini-full.jar" />
		<makecompression srcfile="micro-full.jar" />
	</target>
	<!-- end making packs -->
	
	
	<!-- clean -->
	<target name="clean" description="remove built files">
		<!-- remove contents of dirClasses, but leave dirClasses behind -->
		<delete dir="${dirClasses}"/>
		<delete dir="${dirGenerate}"/>
	</target>
</project>
